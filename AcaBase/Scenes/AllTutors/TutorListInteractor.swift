//
//  TutorListInteractor.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 10/3/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TutorListBusinessLogic
{
    func getTutors(request: TutorList.Tutors.Request)
    func updateFavTrainers(request: TutorList.Update.Request)
    func filterTutors(request: TutorList.FilterTutors.Request)
}

protocol TutorListDataStore
{
    var tutorList : [TutorDAO]? { get set }
    var topicList : [TopicDAO]? { get set }
    var isSelection : Bool! { get set }
    var isFav : Bool? { get set }
}

class TutorListInteractor: TutorListBusinessLogic, TutorListDataStore
{
    var presenter: TutorListPresentationLogic?
    var worker: TutorListWorker!
    var homeWorker : HomeWorker!
    var tutorList : [TutorDAO]?
    var topicList : [TopicDAO]?
    var isSelection: Bool!
    var isFav: Bool?
    
    // MARK: getTutors
    func getTutors(request: TutorList.Tutors.Request)
    {
        worker = TutorListWorker()
        if let tutorList = self.tutorList, let topicList = self.topicList {
            let subjectList = worker.getSubjectsFromTopicList(topicList: topicList)
            if isFav ?? false {
                let favTutors = worker.getFavTutors(tutorList: tutorList)
                let response = TutorList.Tutors.Response(tutorList: favTutors,subjectsList: subjectList, isSelection: isSelection)
                presenter?.presentTutorList(response: response)
            } else {
                let response = TutorList.Tutors.Response(tutorList: tutorList,subjectsList: subjectList, isSelection: isSelection)
                presenter?.presentTutorList(response: response)
            }
        }
    }
    
    // MARK: filterTutors
    func filterTutors(request: TutorList.FilterTutors.Request)
    {
        worker = TutorListWorker()
        if let tutorList = self.tutorList {
            var filtredTutorList = worker.filter(tutorList: tutorList, with: request.tutorName, and: request.subject)
            if isFav ?? false {
                filtredTutorList = worker.getFavTutors(tutorList: filtredTutorList)
            }
            let response = TutorList.FilterTutors.Response(filtredTutorList: filtredTutorList)
            presenter?.presentFilteredTutorList(response: response)
        }
    }
    
    // MARK: updateTutors
    func updateFavTrainers(request: TutorList.Update.Request)
    {
        homeWorker = HomeWorker(mainPageStore: MainPageAPI())
        worker = TutorListWorker()
        homeWorker.getTutors { (tutors) in
            if let tutorList = tutors {
                self.tutorList = tutors
                let favTutors = self.worker.getFavTutors(tutorList: tutorList)
                let response = TutorList.Update.Response(tutorList: favTutors)
                self.presenter?.presentUpdatedTutorList(response: response)
            }
        }
    }
}
