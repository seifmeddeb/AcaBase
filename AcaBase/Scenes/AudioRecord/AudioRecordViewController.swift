//
//  AudioRecordViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 11/3/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVKit

protocol AudioRecordDisplayLogic: class
{
    func displaySomething(viewModel: AudioRecord.Something.ViewModel)
}

class AudioRecordViewController: UIViewController, AudioRecordDisplayLogic
{
    var interactor: AudioRecordBusinessLogic?
    var router: (NSObjectProtocol & AudioRecordRoutingLogic & AudioRecordDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AudioRecordInteractor()
        let presenter = AudioRecordPresenter()
        let router = AudioRecordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        let gesture = UITapGestureRecognizer(target: self, action:  #selector (self.dismissViewController (_:)))
        gesture.delegate = self
        self.bgView.addGestureRecognizer(gesture)
        recordManager.callingViewController = self
        recordManager.finishCompletion { (success) in
            self.finishRecording(success: success)
        }
    }
    // MARK: IBOutlets
    @IBOutlet weak var timeLbl: UILabel!
    @IBOutlet weak var playStopBtn: UIButton!
    @IBOutlet weak var bgView: UIView!
    @IBOutlet weak var errorLabel: UILabel!
    
    
    // MARK: Properties
    var recordManager = RecordManager.default
    var attachement : Attachement?
    var timer: Timer?
    var seconds = 0
    
    // MARK: IBActions
    @IBAction func playStopPressed(_ sender: Any) {
        recordManager.checkPermission { (granted) in
            if granted {
                let isRecording = self.recordManager.recordTapped()
                self.playStopBtn.isSelected = isRecording
                isRecording ? self.startTimer() : self.pauseTimer()
            } else {
                // check for permission again !?
                self.errorLabelAnimation(with: "Permission non accordÃ©e ðŸ˜¥ \n Vous pouvez l'activer dans les ParamÃ¨tres ðŸ˜‰", false)
            }
        }
    }
    @IBAction func donePressed(_ sender: Any) {
        doneRecording()
    }
    @IBAction func deletePressed(_ sender: Any) {
        self.recordManager.stopRecording(success: true)
        
        if self.recordManager.deleteRecordingFile() {
            self.errorLabelAnimation(with: "Enregistrement audio supprimer ðŸ˜‰", false)
        }
    }
    
    // MARK: Do something
    func doSomething()
    {
        let request = AudioRecord.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: AudioRecord.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    @objc func dismissViewController(_ sender:UITapGestureRecognizer){
        doneRecording()
    }
    
    // MARK: Private functions
    private func startTimer() {
        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimeLabel), userInfo: nil, repeats: true)
    }
    @objc func updateTimeLabel() {
        seconds = seconds + 1
        hmsFrom(seconds: seconds) { hours, minutes, seconds in
            
            let hours = getStringFrom(seconds: hours)
            let minutes = getStringFrom(seconds: minutes)
            let seconds = getStringFrom(seconds: seconds)
            
            self.timeLbl.text = "\(hours):\(minutes):\(seconds)"
        }
        
    }
    private func stopTimer() {
        timer?.invalidate()
        seconds = 0
        self.timeLbl.text = "00:00:00"
    }
    
    private func pauseTimer() {
        timer?.invalidate()
    }
    
    private func doneRecording() {
        self.stopTimer()
        self.recordManager.stopRecording(success: true)
        if let attachement = self.recordManager.getRecordingFile() {
            self.attachement = attachement
            // save
            if let tabController = presentingViewController as? UITabBarController {
                if let navController = tabController.viewControllers?[0] as? UINavigationController {
                    if let presenter = navController.topViewController as? QuestionViewController {
                        if let attachement = self.attachement {
                            presenter.attachementsList.append(attachement)
                            presenter.tableView.reloadData()
                            self.dismiss(animated: true) {
                                self.attachement = nil
                            }
                        }
                    }
                }
            }
        } else {
            self.errorLabelAnimation(with: "Aucun enregistrement nâ€™a Ã©tÃ© trouvÃ©", false)
            self.dismiss(animated: true)
        }
    }
    private func finishRecording(success: Bool) {
        self.stopTimer()
        self.playStopBtn.isSelected = false
        self.errorLabelAnimation(with: "Erreur d'enregistrement veuillez rÃ©essayer ðŸ˜…", success)
    }
    
    private func errorLabelAnimation(with text: String, _ success: Bool) {
        if !success {
            self.errorLabel.text = text
            self.errorLabel.isHidden = false
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                self.errorLabel.isHidden = true
            }
        }
    }
}
extension AudioRecordViewController: UIGestureRecognizerDelegate {
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
        return touch.view == self.bgView
    }
}

extension AudioRecordViewController : AVAudioRecorderDelegate {
    func audioRecorderDidFinishRecording(_ recorder: AVAudioRecorder, successfully flag: Bool) {
        if !flag {
            finishRecording(success: false)
        }
    }
}
