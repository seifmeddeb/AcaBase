//
//  ChatPresenter.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 2/28/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatPresentationLogic
{
    func presentMessages(response: Chat.Messages.Response)
}

class ChatPresenter: ChatPresentationLogic
{
    weak var viewController: ChatDisplayLogic?
    
    // MARK: presentMessages
    
    func presentMessages(response: Chat.Messages.Response)
    {
        var messageViewModel: [Message] = []
        
        for message in response.messages {
            
            if let attachement = message.attachement {
                if let mimeType = attachement.type {
                    switch mimeType {
                    case "jpeg","png":
                        let item = Message(id:message.timestamp, senderId: message.from ?? 0, name: response.discussionId == message.from! ? response.tutor.fullName : "Vous", imageAttachement: attachement)
                        messageViewModel.append(item)
                    case "m4a","mp3":
                        let audioAttachement = AudioAttachement(model: attachement)
                        let item = Message(id:message.timestamp, senderId: message.from ?? 0, name: response.discussionId == message.from! ? response.tutor.fullName : "Vous", audioAttachement: audioAttachement)
                        messageViewModel.append(item)
                    default:
                        
                        let docAttachement = DocumentAttachement(model: attachement)
                        let item = Message(id: message.timestamp, senderId: message.from ?? 0, name: response.discussionId == message.from! ? response.tutor.fullName : "Vous", docAttachement: docAttachement)
                        messageViewModel.append(item)
                    }
                    
                }
            } else {
                let item = Message(id:message.timestamp, senderId: message.from ?? 0, name: response.discussionId == message.from! ? "tutor" : "you", content: message.body ?? "message supprim√©")
                messageViewModel.append(item)
            }
            
        }
        
        let viewModel = Chat.Messages.ViewModel(messages: messageViewModel, tutor: response.tutor)
        viewController?.displayMessages(viewModel: viewModel)
    }
}
