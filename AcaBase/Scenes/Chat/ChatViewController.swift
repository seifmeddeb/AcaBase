//
//  ChatViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 2/28/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import Photos
import MessageKit
import InputBarAccessoryView
import FirebaseFirestore
import AVKit
import MobileCoreServices

protocol ChatDisplayLogic: class
{
    func displayMessages(viewModel: Chat.Messages.ViewModel)
    func displaySentMessage(viewModel: Chat.SendMessage.ViewModel)
}

class ChatViewController: MessagesViewController, ChatDisplayLogic
{
    var interactor: ChatBusinessLogic?
    var router: (NSObjectProtocol & ChatRoutingLogic & ChatDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChatInteractor()
        let presenter = ChatPresenter()
        let router = ChatRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        getMessages()
        messageInputBar.delegate = self
        messagesCollectionView.messagesDataSource = self
        messagesCollectionView.messagesLayoutDelegate = self
        messagesCollectionView.messagesDisplayDelegate = self
        messagesCollectionView.messageCellDelegate = self
        
        recordManager.callingViewController = self
        
        let cameraItem = InputBarButtonItem(type: .system) // 1
        cameraItem.tintColor = primaryBlue
        cameraItem.image = #imageLiteral(resourceName: "baseline_add_circle_outline_black_48pt")
        cameraItem.addTarget(
            self,
            action: #selector(attachementsButtonPressed), // 2
            for: .primaryActionTriggered
        )
        cameraItem.setSize(CGSize(width: 35, height: 35), animated: false)
        
        audioItem = InputBarButtonItem(type: .custom) // 1
        
        audioItem.setImage(#imageLiteral(resourceName: "microphone"), for: .normal)
        
        audioItem.addTarget(
            self,
            action: #selector(audioButtonPressedDown), // 2
            for: .primaryActionTriggered
        )
        audioItem.setSize(CGSize(width: 35, height: 35), animated: false)
        audioItem.imageEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 7)
        
        messageInputBar.leftStackView.alignment = .center
        messageInputBar.setLeftStackViewWidthConstant(to: 80, animated: false)
        messageInputBar.setStackViewItems([cameraItem,audioItem], forStack: .left, animated: false)
        messageInputBar.sendButton.title = ""
        messageInputBar.sendButton.setImage(UIImage(named: "MMS"), for: .normal)
        messageInputBar.sendButton.imageEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 7, right: 0)
        messageInputBar.setRightStackViewWidthConstant(to: 30, animated: false)
        
        messageInputBar.middleContentView?.backgroundColor = .white
        messageInputBar.middleContentView?.borderWidth = 1
        messageInputBar.middleContentView?.borderColor = primaryBlue
        messageInputBar.middleContentView?.cornerRadius = 10
        
        
        self.navigationController?.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.tabBarController?.tabBar.isHidden = true
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        if isRecording {
            audioItem.setImage(#imageLiteral(resourceName: "microphone"), for: .normal)
            self.stopTimer()
            self.recordManager.stopRecording(success: true)
            _ = self.recordManager.deleteRecordingFile()
        }
    }
    
    // MARK: Properties
    
    private var messages: [Message] = []
    private var user: User?
    var tutor : TutorDAO?
    private let recordManager = RecordManager.default
    private var recordingTimer: Timer?
    private var audioRecorder: AVAudioRecorder?
    private var player: AVAudioPlayer?
    private var currentURL :URL?
    private var animationManager = RecordAnimationManager.shared
    
    var audioItem : InputBarButtonItem!
    var isRecording = false
    
    /// The `BasicAudioController` controll the AVAudioPlayer state (play, pause, stop) and udpate audio cell UI accordingly.
    lazy var audioController = BasicAudioController(messageCollectionView: messagesCollectionView)
    
    // MARK: Outlets
    
    // MARK: getMessages
    func getMessages()
    {
        let request = Chat.Messages.Request()
        interactor?.getMessages(request: request)
    }
    
    func displayMessages(viewModel: Chat.Messages.ViewModel)
    {
        if viewModel.messages.count > 0 {
            messages = viewModel.messages
            messagesCollectionView.reloadData()
            messagesCollectionView.scrollToLastItem()
        }
        
        self.tutor = viewModel.tutor
        
        setTitleView()
        
        setRightNavBtn()
    }
    
    // MARK: sendMessage
    func sendMessage(message: String)
    {
        let request = Chat.SendMessage.Request(id: messages.count, body: message)
        interactor?.sendMessage(request: request)
    }
    
    func displaySentMessage(viewModel: Chat.SendMessage.ViewModel)
    {
        // automatically updated it's Firebase duh !!!
    }
    
    // MARK: sendAttachement
    func sendAttachement(images: [UIImage], attachement: [Attachement])
    {
        let request = Chat.SendAttachement.Request(id: messages.count, images: images, attachements: attachement)
        interactor?.sendAttachement(request: request)
    }
    
    func displaySentAttachement(viewModel: Chat.SendAttachement.ViewModel)
    {
        // automatically updated it's Firebase duh !!!
    }
    
    // MARK: - NavBar custom titleView
    fileprivate func setTitleView() {
        let imageView = UIImageView()
        NSLayoutConstraint.activate([
            imageView.heightAnchor.constraint(equalToConstant: 36),
            imageView.widthAnchor.constraint(equalToConstant: 36)
        ])
        imageView.cornerRadius = 18
        imageView.clipsToBounds = true
        imageView.contentMode = .scaleAspectFill
        imageView.setImageAsync(url: URL(string: self.tutor?.picture ?? ""))
        
        let titleLabel = UILabel()
        titleLabel.textColor = primaryBlue
        titleLabel.font = UIFont(name: "Roboto-Medium", size: 16)
        titleLabel.text = self.tutor?.fullName ?? "yooo"
        
        let hStack = UIStackView(arrangedSubviews: [imageView, titleLabel])
        hStack.spacing = 15
        hStack.alignment = .center
        
        navigationItem.titleView = hStack
    }
    
    fileprivate func setRightNavBtn() {
        let endButton = UIButton(frame: CGRect(x: 0, y: 0, width: 80, height: 25))
        endButton.setTitle("clÃ´turer session", for: .normal)
        endButton.backgroundColor = primaryGreen
        endButton.titleLabel?.font = UIFont(name: "Roboto-Medium", size: 10)
        endButton.titleLabel?.textColor = .black
        endButton.titleEdgeInsets.right = 4
        endButton.titleEdgeInsets.left = 4
        endButton.cornerRadius = 5
        endButton.clipsToBounds = true
        endButton.addTarget(self, action: #selector(endSessionAction), for: .touchUpInside)
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(customView: endButton)
    }
    
    
    // MARK: - Actions
    
    @objc func endSessionAction () {
        self.performSegue(withIdentifier: "ChatRating", sender: nil)
    }
    
    @objc private func attachementsButtonPressed() {
        displayAttachmentOptions()
    }
    
    @objc private func audioButtonPressedDown() {
        
        if !isRecording {
            audioItem.tintColor = primaryRed
            audioItem.setImage(#imageLiteral(resourceName: "baseline_cancel_black_36pt"), for: .normal)
            
            recordManager.checkPermission { (granted) in
                if granted {
                    self.audioRecorder = self.recordManager.startRecording()
                    self.animationManager.startRecordingAnimation(for: self.messageInputBar.inputTextView)
                    self.messageInputBar.inputTextView.insertText("shouldSendAudioToken")
                    self.startRecordingTimer()
                } else {
                    // check for permission again !?
                    print("Permission non accordÃ©e ðŸ˜¥ \n Vous pouvez l'activer dans les ParamÃ¨tres ðŸ˜‰")
                }
            }
        } else {
            audioItem.setImage(#imageLiteral(resourceName: "microphone"), for: .normal)
            self.stopTimer()
            self.recordManager.stopRecording(success: true)
            _ = self.recordManager.deleteRecordingFile()
        }
        isRecording = !isRecording
    }
    
    private func startRecordingTimer() {
        recordingTimer = Timer.scheduledTimer(timeInterval: 0.2, target: self, selector: #selector(updateRecordingLevels), userInfo: nil, repeats: true)
    }
    
    private func stopTimer() {
        messageInputBar.inputTextView.text = ""
        recordingTimer?.invalidate()
        self.animationManager.endAnimation()
    }
    
    @objc func updateRecordingLevels() {
        if let recorder = self.audioRecorder {
            
            recorder.updateMeters()

            let average = Double(recorder.averagePower(forChannel: 0))
            
            animationManager.updateAnimation(for: average, view: self.messageInputBar.middleContentView)
        }
    }
    
    private func sendAudioAttachement() {
        audioItem.setImage(#imageLiteral(resourceName: "microphone"), for: .normal)
        self.stopTimer()
        self.recordManager.stopRecording(success: true)
        if let attachement = RecordManager.default.getRecordingFile() {
            print("attachement.duration \(attachement.duration ?? 0.0)")
            self.sendAttachement(images: [UIImage](), attachement: [attachement])
        }
    }
}

// MARK: - AVAudioRecorderDelegate

extension ChatViewController : AVAudioRecorderDelegate {
    func audioRecorderDidFinishRecording(_ recorder: AVAudioRecorder, successfully flag: Bool) {
        if !flag {
            print("error finishing recording")
        }
    }
}

// MARK: - MessagesDataSource

extension ChatViewController: MessagesDataSource {
    
    func currentSender() -> SenderType {
        let loggedUser = UserManager.shared.currentUser
        return Sender(senderId: "\(loggedUser?.userId ?? 0)", displayName: loggedUser?.firstName ?? "")
    }
    
    func numberOfSections(in messagesCollectionView: MessagesCollectionView) -> Int {
        return messages.count
    }
    
    func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> MessageType {
        return messages[indexPath.section]
    }
    
    // 4
    func cellTopLabelAttributedText(for message: MessageType,
                                    at indexPath: IndexPath) -> NSAttributedString? {
        
        let name = message.sender.displayName
        return NSAttributedString(
            string: name,
            attributes: [
                .font: UIFont.preferredFont(forTextStyle: .caption1),
                .foregroundColor: UIColor(white: 0.3, alpha: 1)
            ]
        )
    }
    
}

// MARK: - MessagesLayoutDelegate
extension ChatViewController: MessagesLayoutDelegate {}

// MARK: - MessagesDisplayDelegate

extension ChatViewController: MessagesDisplayDelegate {
    
    func backgroundColor(for message: MessageType, at indexPath: IndexPath,
                         in messagesCollectionView: MessagesCollectionView) -> UIColor {
        
        let lightGray = UIColor(red: 0, green: 0, blue: 0, alpha: 0.2)
        
        switch message.kind {
        case .photo(_):
            return lightGray
        default:
            return isFromCurrentSender(message: message) ? primaryBlue : lightGray
        }
    }
    
    func shouldDisplayHeader(for message: MessageType, at indexPath: IndexPath,
                             in messagesCollectionView: MessagesCollectionView) -> Bool {
        
        // 2
        return false
    }
    
    func messageStyle(for message: MessageType, at indexPath: IndexPath,
                      in messagesCollectionView: MessagesCollectionView) -> MessageStyle {
        
        let corner: MessageStyle.TailCorner = isFromCurrentSender(message: message) ? .bottomRight : .bottomLeft
        
        // 3
        return .bubbleTail(corner, .curved)
    }
    
    func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {
        if isFromCurrentSender(message: message) {
            if let urlStr = UserManager.shared.currentUser?.picture, let url = URL(string: mainUrl+urlStr) {
                avatarView.setImageAsync(url: url, placeholder: #imageLiteral(resourceName: "default-user-avatar"))
            }
        }
        else {
            if let urlStr = tutor?.picture, let url = URL(string: urlStr) {
                avatarView.setImageAsync(url: url, placeholder: #imageLiteral(resourceName: "default-user-avatar"))
            }
        }
    }
    
    func configureMediaMessageImageView(_ imageView: UIImageView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {
        
        switch message.kind {
        case .photo(let attachement):
            
            if let message = message as? Message, let image = message.cachedImage {
                imageView.image = image
            } else {
                getImageAsync(url: attachement.url) { (image) in
                    self.messages[indexPath.section].cachedImage = image
                    imageView.image = image
                }
            }
        default:
            break;
        }
    }
    
    func configureAudioCell(_ cell: AudioMessageCell, message: MessageType) {
        cell.delegate = self
    }
    
}

extension ChatViewController: MessageCellDelegate {
    func didTapPlayButton(in cell: AudioMessageCell) {
        //cell.playButton.isSelected = !(cell.playButton.isSelected)
        guard let indexPath = messagesCollectionView.indexPath(for: cell),
              let message = messagesCollectionView.messagesDataSource?.messageForItem(at: indexPath, in: messagesCollectionView) else {
            print("Failed to identify message when audio cell receive tap gesture")
            return
        }
        guard audioController.state != .stopped else {
            // There is no audio sound playing - prepare to start playing for given audio message
            audioController.playSound(for: message, in: cell)
            return
        }
        if audioController.playingMessage?.messageId == message.messageId {
            // tap occur in the current cell that is playing audio sound
            if audioController.state == .playing {
                audioController.pauseSound(for: message, in: cell)
            } else {
                audioController.resumeSound()
            }
        } else {
            // tap occur in a difference cell that the one is currently playing sound. First stop currently playing and start the sound for given message
            audioController.stopAnyOngoingPlaying()
            audioController.playSound(for: message, in: cell)
        }
    }

    func didTapImage(in cell: MessageCollectionViewCell) {
        guard let indexPath = messagesCollectionView.indexPath(for: cell),
              let message = messagesCollectionView.messagesDataSource?.messageForItem(at: indexPath, in: messagesCollectionView) else {
            print("Failed to identify message when cell is tappped")
            return
        }
        
        switch message.kind {
            case .photo(let mediaItem):
                let imageUrl = mediaItem.url
                
                let zoomImageViewController = ZoomImageViewController(nibName: "ZoomImageViewController", bundle: nil)
                zoomImageViewController.imageUrl = imageUrl
                let navController = UINavigationController(rootViewController: zoomImageViewController)
                self.present(navController, animated: true, completion: nil)
            case .linkPreview(let mediaItem):
                UIApplication.shared.open(mediaItem.url)
            default:
                print("Couldn't get photo")
        }
        
    }
    
    func didTapMessage(in cell: MessageCollectionViewCell) {
        guard let indexPath = messagesCollectionView.indexPath(for: cell),
              let message = messagesCollectionView.messagesDataSource?.messageForItem(at: indexPath, in: messagesCollectionView) else {
            print("Failed to identify message when cell is tappped")
            return
        }
        
        switch message.kind {
            case .linkPreview(let mediaItem):
                UIApplication.shared.open(mediaItem.url)
            default:
                print("Couldn't get Link")
        }
    }
    
}

// MARK: - MessageInputBarDelegate
extension ChatViewController: InputBarAccessoryViewDelegate {
    func inputBar(_ inputBar: InputBarAccessoryView, didPressSendButtonWith text: String) {
        
        let finalText = text.trimmingCharacters(in: .whitespacesAndNewlines)
        inputBar.inputTextView.text = ""
        if finalText == "shouldSendAudioToken" {
            self.sendAudioAttachement()
            return
        }
        sendMessage(message: finalText)
        
    }
    
}

// MARK: - AttachementsActionSheet
extension ChatViewController {
    func displayAttachmentOptions() {
        let alert = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        
        let cameraAction = UIAlertAction(title: "Camera", style: .default){
            UIAlertAction in
            ImagePickerManager.shared.openCamera(viewController: self) { (image) in
                self.sendAttachement(images: [image], attachement: [Attachement]())
            }
        }
        cameraAction.setValue(#imageLiteral(resourceName: "camera").withRenderingMode(.alwaysOriginal), forKey: "image")
        
        let galleryAction = UIAlertAction(title: "Mes photos", style: .default){
            UIAlertAction in
            ImagePickerManager.shared.openGallery(viewController: self) { (image) in
                self.sendAttachement(images: [image], attachement: [Attachement]())
            }
        }
        galleryAction.setValue(#imageLiteral(resourceName: "image").withRenderingMode(.alwaysOriginal), forKey: "image")
        
        let documentsAction = UIAlertAction(title: "Mes documents", style: .default){
            UIAlertAction in
            
            let importMenu = UIDocumentPickerViewController(documentTypes: ["public.item"], in: .import)
            importMenu.delegate = self
            importMenu.modalPresentationStyle = .fullScreen
            self.present(importMenu, animated: true, completion: nil)
        }
        documentsAction.setValue(#imageLiteral(resourceName: "documents").withRenderingMode(.alwaysOriginal), forKey: "image")
        
        alert.addAction(cameraAction)
        alert.addAction(galleryAction)
        alert.addAction(documentsAction)
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        self.present(alert,animated: true)
    }
}

// MARK: - UIDocumentPickerDelegate
extension ChatViewController : UIDocumentPickerDelegate {
    func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
        if controller.documentPickerMode == UIDocumentPickerMode.import {
            if let url = urls.first {
                let attachement = Attachement(name: url.lastPathComponent, objectUrl: url, size: getFileSize(url: url), isAudio: false)
                self.sendAttachement(images: [UIImage](), attachement: [attachement])
            }
        }
    }
}
