//
//  DetailsShopViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 4/15/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsShopDisplayLogic: class
{
    func displayInfo(viewModel: DetailsShop.Info.ViewModel)
    func displayError(viewModel: DetailsShop.Info.ViewModel)
}

class DetailsShopViewController: UIViewController, DetailsShopDisplayLogic
{
    var interactor: DetailsShopBusinessLogic?
    var router: (NSObjectProtocol & DetailsShopRoutingLogic & DetailsShopDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DetailsShopInteractor()
        let presenter = DetailsShopPresenter()
        let router = DetailsShopRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getInfo()
    }
    
    // MARK: IBOutlets
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Properties
    var offerEntries = [OfferDetailsCellType]()
    
    // MARK: setupView
    func getInfo()
    {
        Indicator.sharedInstance.showIndicator()
        let request = DetailsShop.Info.Request()
        interactor?.getInfo(request: request)
    }
    
    func displayInfo(viewModel: DetailsShop.Info.ViewModel)
    {
        Indicator.sharedInstance.hideIndicator()
        if let entries = viewModel.offerEntries {
            offerEntries = entries
            self.tableView.reloadData()
        }
    }
    
    func displayError(viewModel: DetailsShop.Info.ViewModel) {
        Indicator.sharedInstance.hideIndicator()
        let alert = UIAlertController(title: "", message: viewModel.errorMsg ?? "An error has occured, please try again later", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { (action) in
            alert.dismiss(animated: true, completion: nil)
            self.navigationController?.popViewController(animated: true)
        }))
        self.present(alert, animated: true)
    }
}

extension DetailsShopViewController : UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return offerEntries.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let entry = offerEntries[indexPath.row]
        
        switch entry {
            case .header(let offer):
                self.title = offer.model.title
                let cell = tableView.dequeueReusableCell(withIdentifier: "DetailShopHeaderCell", for: indexPath) as! DetailShopHeaderCell
                cell.setCell(viewModel: offer)
                return cell
            case .text(let offer):
                let cell = tableView.dequeueReusableCell(withIdentifier: "DetailShopTextCell", for: indexPath) as! DetailShopTextCell
                if indexPath.row == 1 {
                    cell.setCell(viewModel: offer, hasTitle: false)
                } else {
                    cell.setCell(viewModel: offer, hasTitle: true)
                }
                return cell
            case .price(let offer):
                let cell = tableView.dequeueReusableCell(withIdentifier: "DetailShopPromoCell", for: indexPath) as! DetailShopPromoCell
                cell.setCell(viewModel: offer)
                return cell
            case .footer(let offer):
                let cell = tableView.dequeueReusableCell(withIdentifier: "DetailShopPaymentCell", for: indexPath) as! DetailShopPaymentCell
                cell.didPressPayDelegate {
                    let queryItems = [URLQueryItem(name: "packid", value: "\(offer.model.objectId)"), URLQueryItem(name: "token", value: UserManager.shared.token!)]
                    var urlComps = URLComponents(string: paymentUrl)!
                    urlComps.queryItems = queryItems
                    UIApplication.shared.open(urlComps.url!)
                }
                return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
