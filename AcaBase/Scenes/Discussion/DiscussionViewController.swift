//
//  DiscussionViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 3/5/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DiscussionDisplayLogic: class
{
    func displayDiscussionsList(viewModel: Discussion.List.ViewModel)
}

class DiscussionViewController: UIViewController, DiscussionDisplayLogic
{
    var interactor: DiscussionBusinessLogic?
    var router: (NSObjectProtocol & DiscussionRoutingLogic & DiscussionDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DiscussionInteractor()
        let presenter = DiscussionPresenter()
        let router = DiscussionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        title = "Discussions"
        self.setSearchBarUI()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.getDiscussionsList()
        self.resetNavBarWhenAppearing()
        self.tabBarController?.tabBar.isHidden = false
    }
    
    // MARK: Properties
    var searchBar : UISearchBar!    
    var discussionList = [DiscussionViewModel]()
    
    // MARK: IBOutlets
    @IBOutlet weak var tableView: UITableView!
    
    
    // MARK: VIP UseCases
    
    // MARK: - 1
    func getDiscussionsList()
    {
        Indicator.sharedInstance.showIndicator()
        let request = Discussion.List.Request()
        interactor?.getDiscussionsList(request: request)
    }
    
    func displayDiscussionsList(viewModel: Discussion.List.ViewModel)
    {
        self.discussionList = viewModel.discussions
        self.tableView.reloadData()
        Indicator.sharedInstance.hideIndicator()
    }
    
    // MARK: - 2
    func filterDiscussionList(discussionName: String?)
    {
        let request = Discussion.List.Request(name: discussionName)
        interactor?.getDiscussionsList(request: request)
    }
    
    func displayFilteredList(viewModel: Discussion.List.ViewModel)
    {
        self.discussionList = viewModel.discussions
        self.tableView.reloadData()
    }
    
    // MARK: - 3
    func setFavorite(discussionId: String, isFavorite: Bool)
    {
        let request = Discussion.Favorite.Request(discussionId: discussionId, isFavorite: isFavorite)
        interactor?.setFavoriteDiscussion(request: request)
    }

    // MARK: - 4
    func deleteDiscussion(discussionId: String)
    {
        let request = Discussion.Delete.Request(discussionId: discussionId)
        interactor?.deleteDiscussion(request: request)
    }
    
}
// MARK: UITableViewDelegate, UITableViewDataSource
extension DiscussionViewController : UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return discussionList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "DiscussionCell", for: indexPath) as! DiscussionCell
        let discussion = discussionList[indexPath.row]
        cell.setDiscussion(viewModel: discussion)
        cell.didPressDelete {
            self.deleteDiscussion(discussionId: discussion.model.objectId)
        }
        cell.didPressFavorite {
            self.setFavorite(discussionId: discussion.model.objectId, isFavorite: !(discussion.model.favorite ?? false))
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let discussion = discussionList[indexPath.row]
        if !(discussion.model.closed ?? false) {
            router?.routeToChat(segue: nil)
        }
    }
    
    
}
// MARK: UISearchBarDelegate
extension DiscussionViewController : UISearchBarDelegate {
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        filterDiscussionList(discussionName: nil)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        filterDiscussionList(discussionName: searchBar.text)
    }
    
    func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
        filterDiscussionList(discussionName: searchBar.text)
    }
    
}
