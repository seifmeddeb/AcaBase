//
//  DiscussionWorker.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 3/5/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import FirebaseDatabase

class DiscussionWorker
{
    var ref: DatabaseReference
    
    init() {
        ref = Database.database().reference()
    }
    

    
    func getDiscussions(by name: String?, completionHandler: @escaping ([DiscussionDAO]?) -> Void)
    {
        ref.child("discussions").queryOrdered(byChild: "studentId").queryEqual(toValue: "\(UserManager.shared.currentUser?.userId ?? 0)").observe(.value, with: { (snapshot) in
            let postDict = snapshot.value as? [String : AnyObject] ?? [:]
            
            var list = [Any]()
            for (key,object) in postDict {
                print("key:\(key)\n")
                var dictObject = object as! [String : AnyObject]
                for (key,object) in dictObject {
                    if key == "messages" {
                        if let _ = object as? [AnyObject] {
//                            print("key:\(key)\n")
//                            print("dictObject:\(dictObject)\n")
                        } else {
                            if let msgDict = object as? [String : AnyObject] {
                                var arrayOfMsgs = [AnyObject]()
                                for (_,msgDictObject) in msgDict {
                                    print("msgDictObject:\(msgDictObject)\n")
                                    arrayOfMsgs.append(msgDictObject)
                                }
                                dictObject[key] = arrayOfMsgs as AnyObject
                            }
                        }
                    }
                    
                    
                }
                dictObject["id"] = key as AnyObject
                list.append(dictObject)
            }
            
            if let data = try? JSONSerialization.data(withJSONObject: list) {
                do {
                    let jsonStr = String(data: data, encoding: .utf8)!.replacingOccurrences(of: "\\\"", with: "\"")
                    print("jsonStr:\(jsonStr)")
                    print("\\\"")
                    print("\"")
                    
                    var discussions = try JSONDecoder().decode([DiscussionDAO].self, from: data)
                    
                    if let name = name, name.count > 0 {
                        discussions = discussions.filter { return $0.subject?.lowercased().contains(name.lowercased()) ?? false }
                    }
                    
                    discussions = discussions.sorted{return $0.lastUpdate ?? 0 > $1.lastUpdate ?? 0}
                    
                    DispatchQueue.main.async {
                        completionHandler(discussions)
                    }
                } catch {
                    print("error Decoding:\(error)")
                    DispatchQueue.main.async {
                        completionHandler(nil)
                    }
                }
            }
            
        }) { (error) in
            print("error:\(error.localizedDescription)")
            DispatchQueue.main.async {
                completionHandler(nil)
            }
        }
    }
    
    func setFavoriteDiscussion(by id: String, isFavorite: Bool) {
        ref.child("discussions/\(id)").updateChildValues(["favorite":isFavorite])
    }
    
    func deleteDiscussion(by id: String) {
        ref.child("discussions/\(id)").removeValue { error, _ in
            print(error?.localizedDescription ?? "no error message")
        }
    }
}
