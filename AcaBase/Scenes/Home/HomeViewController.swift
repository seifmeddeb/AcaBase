//
//  HomeViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 6/14/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displayTrainers(viewModel: Home.Tutors.ViewModel)
    func displayTopics(viewModel: Home.Topics.ViewModel)
    func displayQuizs(viewModel: Home.Quizs.ViewModel)
    func displayHomeVideos(viewModel: Home.Videos.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var offset = CGFloat()
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: ðŸ”Œ IBOutlets
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var topicCollectionView: UICollectionView!
    @IBOutlet weak var scrollTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var videosTableView: UITableView!
    
    @IBOutlet weak var topConstraint: NSLayoutConstraint!
    // MARK: Properties
    
    var trainers = [TutorViewModel]()
    var topics = [TopicDAO]()
    var quizs = [QuizDAO]()
    var videos = [VideoAlias]()
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        videosTableView.register(VideoCell.self)
        scrollView.delegate = self
        getTrainers()
        getTopics()
        getHomeQuizs()
        getHomeVideos()
        self.setHomePageNavBar(for: self.navigationItem, titleViewOpacity: offset)
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        if #available(iOS 13.0, *) {
            return .darkContent
        } else {
            // Fallback on earlier versions
            return .default
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        navbarAnimation()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.scrollView.setContentOffset(.zero, animated: false)
    }
    // MARK: Actions
    
    @objc func clickTitleButton() {
        router?.routeToQuestion(segue: nil)
    }
    
    @objc func clickRightButton() {
        router?.routeToLogin(segue: nil)
    }
    
    @objc func clickLeftButton() {
        router?.routeToUserProfile(segue: nil)
    }
    
    // MARK: âœ… Interactor Calls
    func getTrainers()
    {
        let request = Home.Tutors.Request()
        interactor?.getHomeTrainers(request: request)
    }
    
    func displayTrainers(viewModel: Home.Tutors.ViewModel)
    {
        //nameTextField.text = viewModel.name
        trainers = viewModel.tutorList
        self.collectionView.reloadData()
    }
    
    // MARK: get Topics
    
    func getTopics() {
        let request = Home.Topics.Request()
        interactor?.getHomeTopics(request: request)
    }
    
    func displayTopics(viewModel: Home.Topics.ViewModel) {
        // FIXME: just to fetch the subjects
        topics = viewModel.topics
    }
    
    // MARK: get home quizs
    
    func getHomeQuizs(){
        let request = Home.Quizs.Request()
        interactor?.getHomeQuizs(request: request)
    }
    
    func displayQuizs(viewModel: Home.Quizs.ViewModel) {
        quizs = viewModel.quizs
        self.topicCollectionView.reloadData()
    }
    
    // MARK: get home videos
    
    func getHomeVideos(){
        let request = Home.Videos.Request()
        interactor?.getHomeVideos(request: request)
    }
    
    func displayHomeVideos(viewModel: Home.Videos.ViewModel) {
        videos = viewModel.videoList
        self.videosTableView.reloadData()
    }
    // MARK: Private functions
    
    private func navbarAnimation(){
        if offset > 1 {
            offset = 1
            navigationItem.leftBarButtonItem?.customView?.alpha = 1
            navigationItem.rightBarButtonItem?.customView?.alpha = 1
            navigationItem.titleView?.alpha = 1
            self.navigationController?.navigationBar.alpha = 1
            navigationController?.navigationBar.backgroundColor = UIColor(white: 1, alpha: 1)
            self.navigationController?.navigationBar.layer.masksToBounds = false
            self.navigationController?.navigationBar.layer.shadowColor = UIColor.lightGray.cgColor
            self.navigationController?.navigationBar.layer.shadowOpacity = 0.8
            self.navigationController?.navigationBar.layer.shadowOffset = CGSize(width: 0, height: 2.0)
            self.navigationController?.navigationBar.layer.shadowRadius = 1
        } else {
            if offset < 0 {offset=0}
            navigationItem.leftBarButtonItem?.customView?.alpha = offset
            navigationItem.rightBarButtonItem?.customView?.alpha = offset
            navigationItem.titleView?.alpha = offset
            self.navigationController?.navigationBar.alpha = offset
            navigationController?.navigationBar.backgroundColor = UIColor(white: 1, alpha: offset)
            self.navigationController?.navigationBar.isHidden = (offset <= 0)
            
        }
    }
}

extension HomeViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if topicCollectionView == collectionView {
            return (quizs.count > 3) ? 4 : 0
        }
        return (trainers.count > 3) ? 4 : 0
    }
    
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if topicCollectionView == collectionView {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "topicCell", for: indexPath) as! TopicCell
            cell.set(viewModel: quizs[indexPath.row])
            return cell
        }
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "teacherCell", for: indexPath) as! TrainerCell
        cell.set(trainer: trainers[indexPath.row])
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
    {
        if topicCollectionView == collectionView {
            return CGSize(width: 160.0, height: 150.0)
        }
        return CGSize(width: 128.0, height: 142.0)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if self.collectionView == collectionView {
            performSegue(withIdentifier: "DetailTutor", sender: self)
        }
    }
}

// MARK: Navigation Bar Animation
extension HomeViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        self.offset = self.scrollView.contentOffset.y / 150
        self.navbarAnimation()
    }
}

extension HomeViewController : UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return videos.count > 5 ? 5 : videos.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let item = videos[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "VideoCell", for: indexPath) as! VideoCell
        cell.setVideo(viewModel: item)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.routeToVideoDetails(segue: nil)
    }
    
}
