//
//  HomeWorker.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 6/14/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class HomeWorker {
    
    var mainPageStore : MainPageStoreProtocol
    
    init(mainPageStore: MainPageStoreProtocol)
    {
        self.mainPageStore = mainPageStore
    }
    
    func getTutors(completionHandler: @escaping ([TutorDAO]?) -> Void) {
        self.mainPageStore.fetchTrainers() { (trainers: () throws -> [TutorDAO]) -> Void in
            do {
                let trainers = try trainers()
                DispatchQueue.main.async {
                    completionHandler(trainers)
                }
            } catch {
                let nserror = error as NSError
                print("Unresolved error \(nserror), \(nserror.userInfo)")
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
    func getTopics(completionHandler: @escaping ([TopicDAO]?) -> Void) {
        self.mainPageStore.fetchTopics { (topics: () throws -> [TopicDAO]) in
            do {
                let topics = try topics()
                DispatchQueue.main.async {
                    completionHandler(topics)
                }
            } catch {
                let nserror = error as NSError
                print("Unresolved error \(nserror), \(nserror.userInfo)")
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
    func getHomeQuiz(completionHandler: @escaping ([QuizDAO]?) -> Void) {
        self.mainPageStore.fetchHomeQuiz { (quizs: () throws -> [QuizDAO]) -> Void in
            do {
                let quizs = try quizs()
                DispatchQueue.main.async {
                    completionHandler(quizs)
                }
            } catch {
                let nserror = error as NSError
                print("Unresolved error \(nserror), \(nserror.userInfo)")
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
    func getHomeVideos(completionHandler: @escaping ([VideoDAO]?) -> Void) {
        self.mainPageStore.getHomeVideos { (videos: () throws -> [VideoDAO]) -> Void in
            do {
                let videos = try videos()
                DispatchQueue.main.async {
                    completionHandler(videos)
                }
            } catch {
                let nserror = error as NSError
                print("Unresolved error \(nserror), \(nserror.userInfo)")
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
    func getVideosResponse(for videos: [VideoDAO]?) -> [VideoResponseAlias] {
        var videosResponse = [VideoResponseAlias]()
        if let videos = videos {
            for video in videos {
                var videoResponse = VideoResponseAlias()
                videoResponse.title = video.title
                videoResponse.provider = video.provider
                videoResponse.time = getElapsedTimeSince(time: "")
                videoResponse.views = "\(video.nbrViews ?? 78678)"
                videoResponse.url = video.videoUrl
                
                videosResponse.append(videoResponse)
            }
        }
        return videosResponse
    }
}

protocol MainPageStoreProtocol {
    
    func fetchTrainers(completionHandler: @escaping (() throws -> [TutorDAO]) -> Void)
    func fetchTopics(completionHandler: @escaping (() throws -> [TopicDAO]) -> Void)
    func fetchHomeQuiz(completionHandler: @escaping (() throws -> [QuizDAO]) -> Void)
    func getHomeVideos(completionHandler: @escaping (() throws -> [VideoDAO]) -> Void)
}
