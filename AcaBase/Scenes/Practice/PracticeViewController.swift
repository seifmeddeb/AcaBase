//
//  PracticeViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 11/28/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PracticeDisplayLogic: class
{
    func displaySubjects(viewModel: Practice.Subjects.ViewModel)
    func displayModules(viewModel: Practice.Modules.ViewModel)
}

class PracticeViewController: UIViewController, PracticeDisplayLogic
{
    var interactor: PracticeBusinessLogic?
    var router: (NSObjectProtocol & PracticeRoutingLogic & PracticeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PracticeInteractor()
        let presenter = PracticePresenter()
        let router = PracticeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Properties
    
    var searchBar : UISearchBar!
    var moduleList = [ModuleViewModel]()
    var subjects = [String:Int]()
    
    // MARK: IBOutlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var segmentedHolderView: UIView!
    @IBOutlet weak var emptyTableView: UIView!
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getSubjects()
        tableView.register(PracticeCell.self)
        self.title = "Pratique"
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = false
        setNavBarWhenAppearing()
    }
    
    // MARK: getSubjects
    func getSubjects()
    {
        let request = Practice.Subjects.Request()
        interactor?.getSubjects(request: request)
    }
    
    func displaySubjects(viewModel: Practice.Subjects.ViewModel)
    {
        self.subjects = viewModel.subjects
        self.setSubjectsFilter(subjects: viewModel.subjects)
    }
    
    // MARK: getModules
    func getModules(for topicId: Int)
    {
        let request = Practice.Modules.Request(topicId: topicId)
        interactor?.getModules(request: request)
    }
    
    func displayModules(viewModel: Practice.Modules.ViewModel) {
        self.moduleList = viewModel.modules
        self.emptyTableView.isHidden = (self.moduleList.count != 0)
        self.tableView.reloadData()
    }
    
    @objc func segmentChanged(_ sender: UISegmentedControl) {
        if let title = sender.titleForSegment(at: sender.selectedSegmentIndex) {
            if let id = self.subjects[title] {
                self.getModules(for: id)
                return
            }
            // FIXME: FireBase
        }
    }
}
// MARK: UITableViewDelegate, UITableViewDataSource
extension PracticeViewController : UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.moduleList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "PracticeCell", for: indexPath) as! PracticeCell
        cell.setModule(viewModel: moduleList[indexPath.row])
        //cell.progressView.setProgress(progress: "1/4")
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 200
    }
}
