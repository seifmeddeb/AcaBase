//
//  QuestionViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 10/28/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuestionDisplayLogic: class
{
    func displaySomething(viewModel: Question.Something.ViewModel)
}

class QuestionViewController: UIViewController, QuestionDisplayLogic
{
    var interactor: QuestionBusinessLogic?
    var router: (NSObjectProtocol & QuestionRoutingLogic & QuestionDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = QuestionInteractor()
        let presenter = QuestionPresenter()
        let router = QuestionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        setPickerViewWithToolBar()
        hideKeyboardWhenTappedAround() 
    }
    
    // MARK: Outlets
    
    @IBOutlet weak var subjectTextField: UITextField!
    @IBOutlet weak var imagesCollectionView: UICollectionView!
    
    // MARK: Properties
    
    let subjectPickerView = UIPickerView()
    var subjects = ["MathÃ©matique","Phisique"]
    
    // MARK: Do something
    func doSomething()
    {
        let request = Question.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Question.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    // MARK: Private functions
    
    private func setPickerViewWithToolBar() {
        
        subjectTextField.inputView = subjectPickerView
        subjectPickerView.delegate = self
        
        subjectPickerView.backgroundColor = .white
        
        let toolBar = UIToolbar()
        toolBar.barStyle = UIBarStyle.default
        toolBar.isTranslucent = true
        toolBar.tintColor = primaryGreen
        toolBar.sizeToFit()
        
        let doneButton = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.done, target: self, action: #selector(self.donePicker))
        let spaceButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
        let cancelButton = UIBarButtonItem(title: "Cancel", style: UIBarButtonItem.Style.plain, target: self, action: #selector(self.cancelPicker))
        
        toolBar.setItems([cancelButton, spaceButton, doneButton], animated: false)
        toolBar.isUserInteractionEnabled = true
        
        subjectTextField.inputAccessoryView = toolBar
    }
    
    @objc private func donePicker() {
        let row = self.subjectPickerView.selectedRow(inComponent: 0)
        self.subjectPickerView.selectRow(row, inComponent: 0, animated: false)
        self.subjectTextField.text = self.subjects[row]
        self.subjectTextField.resignFirstResponder()
    }
    @objc private func cancelPicker() {
        self.subjectTextField.text = nil
        self.subjectTextField.resignFirstResponder()
    }
}
extension QuestionViewController : UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 4
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if indexPath.row == 0 {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SelectionCell", for: indexPath)
            return cell
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ImageCell", for: indexPath)
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
    {
        let dimension = imagesCollectionView.frame.height - 2.0
        return CGSize(width: dimension, height: dimension)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // FIXME: add click event handler
    }
}
extension QuestionViewController : UIPickerViewDelegate, UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView( _ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return subjects.count
    }
    
    func pickerView( _ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return subjects[row]
    }
    
    func pickerView( _ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        subjectTextField.text = subjects[row]
    }
}
extension QuestionViewController : UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}
