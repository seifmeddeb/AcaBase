//
//  QuestionWorker.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 10/28/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class QuestionWorker
{
    var askStore : AskStoreProtocol?
    
    init(askStore: AskStoreProtocol = AskAPI())
    {
        self.askStore = askStore
    }
    
    func askQuestion(request: AskRequest,completionHandler: @escaping (AskResponse?,Error?) -> Void)
    {
        self.askStore?.askQuestion(request: request) { (response: () throws -> AskResponse) in
            do {
                let response = try response()
                DispatchQueue.main.async {
                    completionHandler(response , nil)
                }
            } catch {
                let nserror = error as NSError
                print("Unresolved error \(nserror), \(nserror.userInfo)")
                DispatchQueue.main.async {
                    completionHandler(nil , nserror)
                }
            }
        }
    }
    
    func getSubject(for questionSearched: QuestionDAO, from subjects: [TopicDAO]) -> TopicDAO?
    {
        // WTF is this shit worst shit i've ever written, fucked up APIs ... Shiiiiit
        for subject in subjects {
            for module in subject.modules ?? [] {
                for chapter in module.chapters ?? [] {
                    for quiz in chapter.quizs ?? [] {
                        for question in quiz.questions ?? [] {
                            if questionSearched.objectId == question.objectId {
                                return subject
                            }
                        }
                    }
                }
            }
        }
        return nil
    }
    
    func uploadAttachments(questionId: String, images: [UIImage], attachements: [Attachement], completionHandler: @escaping (Error?) -> Void) {
        self.askStore?.uploadAttachements(questionId: questionId, images: images, attachements: attachements, completionHandler: { (error) in
            if let error = error {
                completionHandler(error)
            } else {
                completionHandler(nil)
            }
        })
    }
    
}
protocol AskStoreProtocol {
    func askQuestion(request: AskRequest, completionHandler: @escaping (() throws -> AskResponse) -> Void)
    func uploadAttachements(questionId: String, images: [UIImage], attachements: [Attachement], completionHandler: @escaping (Error?) -> Void)
}
