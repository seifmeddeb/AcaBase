//
//  QuizDetailsInteractor.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 12/27/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuizDetailsBusinessLogic
{
    func getQuestions(request: QuizDetails.Question.Request)
    func updateQuestion(request: QuizDetails.QuestionUpdate.Request)
    func getScore(request:QuizDetails.Score.Request)
}

protocol QuizDetailsDataStore
{
    var quiz: QuizDAO? { get set }
}

class QuizDetailsInteractor: QuizDetailsBusinessLogic, QuizDetailsDataStore
{
    var presenter: QuizDetailsPresentationLogic?
    var worker: QuizDetailsWorker!
    var quiz: QuizDAO?
    
    // MARK: getQuestion
    
    func getQuestions(request: QuizDetails.Question.Request)
    {
        worker = QuizDetailsWorker()
        
        var questions = [QuestionDAO]()
        if let unwrappedQuiz = quiz {
            questions = worker.fetchQuestions(for: unwrappedQuiz)
        }
        
        var questionIndex = 0
        
        if let index = request.currentQuestion {
            questionIndex = index
            if let isNext = request.isNext {
                if isNext {
                    if questions[index].state.isAnswered {
                        questionIndex = index + 1
                    } else {
                        return
                    }
                } else {
                    if index > 0 {
                        questionIndex = index - 1
                    } else {
                        return
                    }
                }
            }
        }
        
        let response = QuizDetails.Question.Response(questions: questions, quiz: quiz, currentQuestion: questionIndex)
        presenter?.presentQuestions(response: response)
    }
    
    // MARK: updateQuestion
    
    func updateQuestion(request: QuizDetails.QuestionUpdate.Request) {
        
        worker = QuizDetailsWorker()
        
        var displayAnswer = false
        var displayWrong = false
        
        var questions = [QuestionDAO]()
        if let unwrappedQuiz = quiz {
            questions = worker.fetchQuestions(for: unwrappedQuiz)
            questions = worker.updateQuestion(option: request.option, question: request.question, questionList: questions, &displayAnswer, &displayWrong)
            
            quiz?.questions = questions
        }
        
        let response = QuizDetails.Question.Response(questions: questions, quiz: quiz, currentQuestion: request.currentQuestion, displayAnswer: displayAnswer, displayWrong: displayWrong)
        presenter?.presentQuestions(response: response)        
    }
    
    // MARK: getScore
    
    func getScore(request:QuizDetails.Score.Request) {
        
        worker = QuizDetailsWorker()
        
        var questions = [QuestionDAO]()
        
        if let unwrappedQuiz = quiz {
            questions = worker.fetchQuestions(for: unwrappedQuiz)
        }
        let correctAnswers = worker.getScore(for: questions)
        
        let response = QuizDetails.Score.Response(correctAnswers: correctAnswers, questions: questions)
        presenter?.presentScore(response: response)
    }
}
