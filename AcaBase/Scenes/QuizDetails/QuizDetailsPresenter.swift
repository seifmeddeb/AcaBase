//
//  QuizDetailsPresenter.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 12/27/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuizDetailsPresentationLogic
{
    func presentQuestions(response: QuizDetails.Question.Response)
    func presentScore(response:QuizDetails.Score.Response)
}

class QuizDetailsPresenter: QuizDetailsPresentationLogic
{
    weak var viewController: QuizDetailsDisplayLogic?
    
    // MARK: presentQuestions
    
    func presentQuestions(response: QuizDetails.Question.Response)
    {
        var questionsList = [QuestionsAlias]()
        
        for question in response.questions {
            let itemDetails = getQuestionDetails(for: question,quiz: response.quiz, currentQuestion: response.currentQuestion)
            
            let viewModel = QuestionsAlias(model: question, state: question.state, questionDetails: itemDetails)
            questionsList.append(viewModel)
        }
        
        
        if response.questions.count > 0 {
            let viewModel = QuizDetails.Question.ViewModel(questions: questionsList, currentQuestion: response.currentQuestion, displayAnswer: response.displayAnswer, displayWrong: response.displayWrong, quizTitle: response.quiz?.title ?? "")
            viewController?.displayQuestions(viewModel: viewModel)
        } else {
            // FIXME: OR NOT ? is it necessary ?? we shouldn't have quizs with no questions
        }
    }
    
    // MARK: presentScore
    
    func presentScore(response: QuizDetails.Score.Response) {
        let scoreStr = "\(response.correctAnswers)/\(response.questions.count)"
        let viewModel = QuizDetails.Score.ViewModel(correctAnswers: response.correctAnswers, scoreStr: scoreStr)
        viewController?.displayScore(viewModel: viewModel)
    }
    
    // MARK: Private funcs
    
    private func getQuestionDetails(for question: QuestionDAO, quiz: QuizDAO?, currentQuestion: Int) -> [QuestionDetailsType]{
        var itemDetails = [QuestionDetailsType]()

        // QUESTION:
        // creating the questionViewModel
        let questionViewModel = QuestionItemAlias(title: "Question \(currentQuestion+1)/\(quiz?.questions?.count ?? 0):", desc: question.title ?? "", imageUrl: URL(string: getImageUrl(for: question.questionImage)), state: question.state)
        // wrapping the question in QuestionDetailsType enum
        let wrappedQuestion = QuestionDetailsType.question(questionViewModel)
        // Appending to the details Array
        itemDetails.append(wrappedQuestion)
        
        // OPTIONS:
        if let options = question.options{
            for option in options.enumerated() {
                // creating the optionViewModel
                let item = OptionItemAlias(model: option.element, title: getLetter(for: option.offset), desc: option.element.title ?? "", imageUrl: URL(string: getImageUrl(for: option.element.image)), state: option.element.state, isTrue: option.element.isTrue)
                // wrapping the question in QuestionDetailsType enum
                let wrappedItem = QuestionDetailsType.option(item)
                // Appending to the details Array
                itemDetails.append(wrappedItem)
            }
        }
        
        // ANSWER:
        // creating the answerViewModel
        let answerViewModel = QuestionItemAlias(title: "RÃ©ponse:", desc: question.answer ?? "", imageUrl: URL(string: getImageUrl(for:question.answerImage)), state: question.state)
        // wrapping the question in QuestionDetailsType enum
        let wrappedAnswer = QuestionDetailsType.answer(answerViewModel)
        // Appending to the details Array
        itemDetails.append(wrappedAnswer)
        
        return itemDetails
    }
    
    private func getLetter(for number: Int)->String{
        switch number {
        case 0:
            return "A"
        case 1:
            return "B"
        case 2:
            return "C"
        case 3:
            return "D"
        case 4:
            return "E"
        case 5:
            return "F"
        case 6:
            return "G"
        default:
            return "H"
        }
    }
}
