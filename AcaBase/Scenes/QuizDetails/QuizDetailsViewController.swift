//
//  QuizDetailsViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 12/27/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuizDetailsDisplayLogic: class
{
    func displayQuestions(viewModel: QuizDetails.Question.ViewModel)
    func displayScore(viewModel: QuizDetails.Score.ViewModel)
}

class QuizDetailsViewController: UIViewController, QuizDetailsDisplayLogic
{
    var interactor: QuizDetailsBusinessLogic?
    var router: (NSObjectProtocol & QuizDetailsRoutingLogic & QuizDetailsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = QuizDetailsInteractor()
        let presenter = QuizDetailsPresenter()
        let router = QuizDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getQuestions()
        self.title = ""
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = false
        self.tabBarController?.tabBar.isHidden = true
        setNavBarWhenAppearing()
    }

    
    // MARK: Properties
    var questionList = [QuestionsAlias]()
    var questionDetails = [QuestionDetailsType]()
    var currentQuestion = 0
    
    // for score showing
    var score = 0
    var total = 0
    
    // MARK: IBOutlets
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var retryViewConstraint: NSLayoutConstraint!
    
    
    // MARK: getQuestion
    func getQuestions()
    {
        let request = QuizDetails.Question.Request()
        interactor?.getQuestions(request: request)
    }
    
    func displayQuestions(viewModel: QuizDetails.Question.ViewModel)
    {
        self.title = viewModel.quizTitle
        self.currentQuestion = viewModel.currentQuestion
        self.questionList = viewModel.questions
        self.questionDetails = viewModel.questions[currentQuestion].questionDetails
        self.collectionView.reloadData()
        self.collectionView.scrollToItem(at: IndexPath(row: currentQuestion, section: 0), at: .centeredHorizontally, animated: true)
        self.tableView.reloadData()
        if viewModel.displayAnswer {
            tableView.scrollToRow(at: IndexPath(row: questionDetails.count-1, section: 0), at: .bottom, animated: true)
        } else {
            tableView.scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: false)
        }
        if viewModel.displayWrong {
            UIView.animate(withDuration: 0.5) {
                self.retryViewConstraint.constant = 0
                self.view.layoutIfNeeded()
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.5) {
                UIView.animate(withDuration: 0.5) {
                    self.retryViewConstraint.constant = -40
                    self.view.layoutIfNeeded()
                }
            }
        } else {
            UIView.animate(withDuration: 0.5) {
                self.retryViewConstraint.constant = -40
                self.view.layoutIfNeeded()
            }
        }
    }
    
    // MARK: updateQuestion
    func updateQuestion(option:OptionDAO,question:QuestionDAO)
    {
        let request = QuizDetails.QuestionUpdate.Request(option: option, question: question, currentQuestion: currentQuestion)
        interactor?.updateQuestion(request: request)
    }
    
    // MARK: nextQuestion
    func nextQuestion()
    {
        let request = QuizDetails.Question.Request(currentQuestion: currentQuestion, isNext: true)
        interactor?.getQuestions(request: request)
    }
    
    // MARK: previousQuestion
    func previousQuestion()
    {
        let request = QuizDetails.Question.Request(currentQuestion: currentQuestion, isNext: false)
        interactor?.getQuestions(request: request)
    }
    
    // MARK: getScore
    
    func getScore() {
        let request = QuizDetails.Score.Request()
        interactor?.getScore(request: request)
    }
    
    func displayScore(viewModel: QuizDetails.Score.ViewModel) {
        self.score = viewModel.correctAnswers
        self.total = questionList.count
        performSegue(withIdentifier: "ShowScore", sender: self)
    }
    
    // MARK: IBActions
    
    @IBAction func previousPressed(_ sender: Any) {
        previousQuestion()
    }
    @IBAction func questionPressed(_ sender: Any) {
        router?.routeToAskQuestion(segue: nil)
    }
    @IBAction func nextPressed(_ sender: Any) {
        if self.currentQuestion < self.questionList.count-1 {
            nextQuestion()
        } else {
            getScore()
        }
    }
}
extension QuizDetailsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if questionList.count > 0 {
            let count = questionDetails.count
            let hasAnswer = questionDetails[count-1].isAnswered
            return hasAnswer ? count : count-1
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let item = questionDetails[indexPath.row]
        switch item {
        case .answer(let viewModel):
            let cell = tableView.dequeueReusableCell(withIdentifier: "QuestionResponseCell", for: indexPath) as! QuestionResponseCell
            cell.setAnswer(viewModel)
            return cell
        case .option(let viewModel):
            let cell = tableView.dequeueReusableCell(withIdentifier: "OptionCell", for: indexPath) as! OptionCell
            let question = self.questionList[self.currentQuestion].model
            cell.setOption(with: viewModel, question)
            cell.didSelectOption {
                self.updateQuestion(option: viewModel.model, question: question)
            }
            return cell
        case .question(let viewModel):
            let cell = tableView.dequeueReusableCell(withIdentifier: "QuestionResponseCell", for: indexPath) as! QuestionResponseCell
            cell.setQuestion(viewModel)
            return cell
        }
    }
    
}
extension QuizDetailsViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return questionList.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let question = questionList[indexPath.row]
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "QuestionStateCell", for: indexPath) as! QuestionStateCell

        cell.setCell(number: indexPath.row+1, question: question, isCurrent: currentQuestion == indexPath.row)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
    {
        return CGSize(width: 35.0, height: 35.0)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let question = questionList[indexPath.row]
        if question.state.isAnswered {
            let request = QuizDetails.Question.Request(currentQuestion: indexPath.row)
            interactor?.getQuestions(request: request)
        }
    }
}
