//
//  ShopPresenter.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 4/10/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShopPresentationLogic
{
    func presentOfferList(response: Shop.OfferList.Response)
}

class ShopPresenter: ShopPresentationLogic
{
    weak var viewController: ShopDisplayLogic?
    
    // MARK: presentOfferList
    
    func presentOfferList(response: Shop.OfferList.Response)
    {

        var appendedSpecial = false
        if let offers = response.offersList {
            var OffersList = [OfferCellType]()
            for offer in offers {
                
                let imageUrl = URL(string: offer.image)
                let accessStr = getAccessListAsString(accessList: offer.access)
                let offer = OfferViewModel(model: offer, imageUrl: imageUrl, access: accessStr)
                
                if offer.model.isSpecial && !appendedSpecial {
                    appendedSpecial = true
                    OffersList.insert(OfferCellType.special(offer), at: 0)
                } else {
                    OffersList.append(OfferCellType.simple(offer))
                }
            }
            
            let viewModel = Shop.OfferList.ViewModel(offerList: OffersList, errorMsg: nil, hasSpecial: appendedSpecial)
            viewController?.displayOfferList(viewModel: viewModel)
        } else {
            let viewModel = Shop.OfferList.ViewModel(offerList: nil, errorMsg: "Nous n'avons pas d'offre pour le moment")
            viewController?.displayOfferList(viewModel: viewModel)
        }
        
        
    }
    
    fileprivate func getAccessListAsString(accessList: [String]?) -> String {
        var accessStr = ""
        if let accessList = accessList {
            for access in accessList.enumerated() {
                accessStr = "\(accessStr)\(access.element)\((access.offset == accessList.count - 1) ? "" : ",")"
            }
        }
        return accessStr
    }
}
