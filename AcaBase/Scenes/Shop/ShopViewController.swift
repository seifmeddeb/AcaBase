//
//  ShopViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 4/10/21.
//  Copyright (c) 2021 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShopDisplayLogic: class
{
    func displayOfferList(viewModel: Shop.OfferList.ViewModel)
}

class ShopViewController: UIViewController, ShopDisplayLogic
{
    var interactor: ShopBusinessLogic?
    var router: (NSObjectProtocol & ShopRoutingLogic & ShopDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShopInteractor()
        let presenter = ShopPresenter()
        let router = ShopRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getOffersList()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        setNormalNavBarWhenAppearing()
        self.title = "Boutique"
    }
    
    // MARK: - Properties
    
    var selectedOffer : OfferDAO?
    
    //MARK: - IBOutlets
    @IBOutlet weak var collectionView: UICollectionView!
    
    // MARK: - Properties
    var offerList = [OfferCellType]()
    var hasSpecial = false
    
    // MARK: getOffersList
    
    func getOffersList()
    {
        Indicator.sharedInstance.showIndicator()
        let request = Shop.OfferList.Request()
        interactor?.getOfferList(request: request)
    }
    
    func displayOfferList(viewModel: Shop.OfferList.ViewModel)
    {
        Indicator.sharedInstance.hideIndicator()
        if let offers = viewModel.offerList {
            self.hasSpecial = viewModel.hasSpecial
            offerList = offers
            self.collectionView.reloadData()
        } else {
            let alert = UIAlertController(title: "ðŸ˜¢", message: viewModel.errorMsg ?? "Oups! un probleme est survenu rÃ©essayer plus tard !", preferredStyle: .alert)
            self.present(alert, animated: true)
        }
        
    }
}

extension ShopViewController : UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return  hasSpecial ? 2 : 1
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if !hasSpecial {
            return offerList.count
        }
        return section == 0 ? 1 : offerList.count - 1
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        var item = offerList[indexPath.row]
        
        if indexPath.section == 1 {
            item = offerList[indexPath.row + 1]
        }
        
        switch item {
            case .special(let offer):
                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ShopHeaderCell", for: indexPath) as! ShopHeaderCell

                cell.setCell(viewModel: offer)
                return cell
            case .simple(let offer):
                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ShopViewCell", for: indexPath) as! ShopViewCell

                cell.setCell(viewModel: offer)
                return cell
        }
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
    {
        if !hasSpecial {
            return CGSize(width: 157.0, height: 218.0)
        }
        return indexPath.section == 0 ? CGSize(width: collectionView.frame.width, height: 275.0) : CGSize(width: 157.0, height: 218.0)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        if !hasSpecial {
            return UIEdgeInsets(top: 0, left: 20, bottom: 5, right: 20)
        }
        return section == 0 ? UIEdgeInsets.zero : UIEdgeInsets(top: 0, left: 20, bottom: 5, right: 20)
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        
        let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "headerView", for: indexPath) as! OffersHeaderView
                
        headerView.titleLbl.text = "Offres"
        
        return headerView
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        
        if !hasSpecial {
            return CGSize(width: collectionView.frame.width, height: 50)
        }
        return section == 0 ? CGSize.zero : CGSize(width: collectionView.frame.width - 20, height: 50)
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        var item = offerList[indexPath.row]
        if indexPath.section == 1 {
            item = offerList[indexPath.row + 1]
        }
        switch item {
            case .special(let viewModel),.simple(let viewModel):
                self.selectedOffer = viewModel.model
                self.router?.routeToOfferDetails(segue: nil)
        }
    }
}
