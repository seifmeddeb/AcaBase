//
//  SubscribeInteractor.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 5/1/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SubscribeBusinessLogic
{
    func registerUser(request: Subscribe.User.Request)
}

protocol SubscribeDataStore
{
    //var name: String { get set }
}

class SubscribeInteractor: SubscribeBusinessLogic, SubscribeDataStore
{
    var presenter: SubscribePresentationLogic?
    var worker: UserWorker?
    var subscribeWorker: SubscribeWorker = SubscribeWorker()
    //var name: String = ""
    
    // MARK: Register User
    
    func registerUser(request: Subscribe.User.Request)
    {
        worker = UserWorker(usersStore: UserAPI())
        if subscribeWorker.checkData(for: request) {
            worker?.subscribeUser(subscribeRequest: request, completionHandler: { (userDAO) in
                
                var response = Subscribe.User.Response()
                
                do {
                    response.user = try userDAO()
                    if let user = response.user {
                        UserManager.shared.cacheCurrentUser(user: user)
                    }                    
                } catch {
                    if let subscribeError = error as? UserAPIError.Subscribe {
                        response.errorMsg = subscribeError.message
                    } else {
                        if let cannotError = error as? UserAPIError {
                            switch cannotError {
                            case .CannotGetSubscribeError(let msg):
                                response.errorMsg = msg
                            case .CannotSubscribe(let msg):
                                response.errorMsg = msg
                            }
                        } else {
                            response.errorMsg = "Something went wrong"
                        }
                    }
                    
                }
                
                self.presenter?.presentRegister(response: response)
            })
        } else {
            var response = Subscribe.User.Response()
            subscribeWorker.getErrorMessages(from: request, for: &response)
            self.presenter?.presentRegister(response: response)
        }
        
    }
}
