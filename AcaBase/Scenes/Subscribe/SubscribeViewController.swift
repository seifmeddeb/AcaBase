//
//  SubscribeViewController.swift
//  AcaBase
//
//  Created by Seif eddinne meddeb on 5/1/20.
//  Copyright (c) 2020 Seif eddinne meddeb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SubscribeDisplayLogic: class
{
    func displaySuccessfullRegister(viewModel: Subscribe.User.ViewModel.Result.Successfull)
    func displayFailureRegister(viewModel: Subscribe.User.ViewModel.Result.Failure)
    func displayFormError(viewModel: Subscribe.User.ViewModel.Result.Failure)
}

class SubscribeViewController: UIViewController, SubscribeDisplayLogic
{
    var interactor: SubscribeBusinessLogic?
    var router: (NSObjectProtocol & SubscribeRoutingLogic & SubscribeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SubscribeInteractor()
        let presenter = SubscribePresenter()
        let router = SubscribeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        emailTextField.delegate = self
        firstNameTextField.delegate = self
        passwordTextField.delegate = self
        
        lastNameTextField.delegate = self
        phoneTextField.delegate = self
        confPassTextField.delegate = self
        textFields = [firstNameTextField,emailTextField,passwordTextField,lastNameTextField,phoneTextField,confPassTextField]
        labels = [firstNameErrorLbl,lastNameErrorLbl,phoneErrorLbl,emailErrorLbl,pswErrorLbl,pswConfErrorLbl,pictureErrorLbl]
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        registerForKeyboardNotifications()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        deregisterFromKeyboardNotifications()
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    // MARK: IBOutlets
    
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var firstNameTextField: UITextField!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var lastNameTextField: UITextField!
    @IBOutlet weak var phoneTextField: UITextField!
    @IBOutlet weak var confPassTextField: UITextField!
    @IBOutlet weak var profileImageView: UIImageView!
    
    @IBOutlet weak var firstNameErrorLbl: UILabel!
    @IBOutlet weak var lastNameErrorLbl: UILabel!
    @IBOutlet weak var phoneErrorLbl: UILabel!
    @IBOutlet weak var emailErrorLbl: UILabel!
    @IBOutlet weak var pswErrorLbl: UILabel!
    @IBOutlet weak var pswConfErrorLbl: UILabel!
    @IBOutlet weak var pictureErrorLbl: UILabel!
    
    private var activeField: UITextField?
    private var textFields = [UITextField?]()
    private var labels = [UILabel?]()
    // MARK: IBActions
    
    @IBAction func profileImage(_ sender: Any) {
        ImagePickerManager.shared.pickImage(self){ image in
            self.profileImageView.image = image
        }
    }
    @IBAction func subscribe(_ sender: Any) {
        registerUser()
    }
    
    @IBAction func login(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    // MARK: Requests
    
    func registerUser()
    {
        startAnimating(activityIndicator)
        var request = Subscribe.User.Request(firstName: firstNameTextField.text ?? "", lastName: lastNameTextField.text ?? "", phone: phoneTextField.text ?? "", email: emailTextField.text ?? "", password: passwordTextField.text ?? "", image: "data:image/png;base64,\("sdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsd"/*self.profileImageView.image?.pngData()?.base64EncodedString() ?? ""*/)")
        request.passwordRepeat = confPassTextField.text ?? ""
        interactor?.registerUser(request: request)
    }
    
    // MARK: Displays
    
    func displaySuccessfullRegister(viewModel: Subscribe.User.ViewModel.Result.Successfull)
    {
        stopAnimating(activityIndicator)
        resetFormErrors(for: textFields, and: labels)
        let alert = UIAlertController(title: "", message: "Welcome \(viewModel.user.currentUser.firstName) ðŸ¥³ ! \n A verification email has been sent to you \n Check it out before logging in ðŸ¤“", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { (action) in
            alert.dismiss(animated: true) {
                self.navigationController?.popViewController(animated: true)
            }
        }))
        self.present(alert, animated: true)
    }
    
    func displayFailureRegister(viewModel: Subscribe.User.ViewModel.Result.Failure) {
        stopAnimating(activityIndicator)
        resetFormErrors(for: textFields, and: labels)
        let alert = UIAlertController(title: "", message: viewModel.errorMsg ?? "Something went wrong", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { (action) in
            alert.dismiss(animated: true, completion: nil)
        }))
        self.present(alert, animated: true)
    }
    
    func displayFormError(viewModel: Subscribe.User.ViewModel.Result.Failure) {
        stopAnimating(activityIndicator)
        resetFormErrors(for: textFields, and: labels)
        if let lastNameTxt = viewModel.lastNameError {
            setError(for: lastNameTextField, label: lastNameErrorLbl, text: lastNameTxt)
        }
        if let firstNameTxt = viewModel.firstNameError {
            setError(for: firstNameTextField, label: firstNameErrorLbl, text: firstNameTxt)
        }
        if let phoneTxt = viewModel.phoneError {
            setError(for: phoneTextField, label: phoneErrorLbl, text: phoneTxt)
        }
        if let emailTxt = viewModel.emailError {
            setError(for: emailTextField, label: emailErrorLbl, text: emailTxt)
        }
        if let pictureTxt = viewModel.pictureError {
            pictureErrorLbl.text = pictureTxt
        }
        if let pswTxt = viewModel.passwordError {
            setError(for: passwordTextField, label: pswErrorLbl, text: pswTxt)
        }
        if let pswConfTxt = viewModel.passwordRepeatError {
            setError(for: confPassTextField, label: pswConfErrorLbl, text: pswConfTxt)
        }
    }
}
extension SubscribeViewController : UITextFieldDelegate {
    
    func registerForKeyboardNotifications(){
        //Adding notifies on keyboard appearing
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWasShown(notification:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillBeHidden(notification:)), name: UIResponder.keyboardWillHideNotification, object: nil)
    }

    func deregisterFromKeyboardNotifications(){
        //Removing notifies on keyboard appearing
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
    }

    @objc func keyboardWasShown(notification: NSNotification){
        //Need to calculate keyboard exact size due to Apple suggestions
        self.scrollView.isScrollEnabled = true
        let info = notification.userInfo!
        let keyboardSize = (info[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue.size
        let contentInsets : UIEdgeInsets = UIEdgeInsets(top: 0.0, left: 0.0, bottom: keyboardSize!.height, right: 0.0)

        self.scrollView.contentInset = contentInsets
        self.scrollView.scrollIndicatorInsets = contentInsets

        var aRect : CGRect = self.view.frame
        aRect.size.height -= keyboardSize!.height
        if let activeField = self.activeField {
            if (!aRect.contains(activeField.frame.origin)){
                self.scrollView.scrollRectToVisible(activeField.frame, animated: true)
            }
        }
    }

    @objc func keyboardWillBeHidden(notification: NSNotification){
        //Once keyboard disappears, restore original positions
        self.scrollView.contentInset = UIEdgeInsets.zero
        self.scrollView.scrollIndicatorInsets = UIEdgeInsets.zero
        self.view.endEditing(true)
    }

    func textFieldDidBeginEditing(_ textField: UITextField){
        activeField = textField
    }

    func textFieldDidEndEditing(_ textField: UITextField){
        activeField = nil
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
       // Try to find next responder
       if let nextField = textField.superview?.viewWithTag(textField.tag + 1) as? UITextField {
          nextField.becomeFirstResponder()
       } else {
          // Not found, so remove keyboard.
          textField.resignFirstResponder()
       }
       // Do not add a line break
       return false
    }
}
